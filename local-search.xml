<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>近况</title>
    <link href="/2021/07/21/art13/"/>
    <url>/2021/07/21/art13/</url>
    
    <content type="html"><![CDATA[<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ul><li>我已经不记得上次打开vscode是什么时候了，四五个月没有写过一行代码了，最近才着急找工作了，打算好好准备一下面试，这才打开许久未见的编辑器看看代码。自从上次实习离职后，在学校浑浑噩噩似乎没有压力，明明毕业都成问题但却无所事事。大四下学期有一门需求工程还有一门陪伴了几年的概率论与数理统计，需求工程是因为之前时间冲突没有选到，概率论是因为挂科补考重修，大概这辈子都会记得这门课。四月底本来信誓旦旦要去参军，以此来顺利毕业，怎料体检都没有通过，事前还大嘴巴和好多同学和朋友说了，现在想想还真是羞愧。后来和家里人沟通后决定出来找工作吧，减轻家里负担也是对自己不认真读书负责。后来也是并不太顺利地拿到了毕业证，很感谢班主任。</li></ul><h2 id="现状和目标"><a href="#现状和目标" class="headerlink" title="现状和目标"></a>现状和目标</h2><ul><li>离校前找好了房子，离学校不远，四个人，两个人考研一个考公，我找工作，我们开始了没羞没臊的社会生活。大家都在按照自己的计划准备着，我玩了两周，天天就是买菜做饭，感觉很花时间。最一开始大家是自己做饭，后来发觉太累了，点起了外卖。外卖大家都知道的，相比自己做饭肯定更贵，但是省时。吃着吃着外卖没啥钱了就又开始买菜做饭了，美团优选买菜，到小区门口的提货点自己拿就行，也不用跑很远去买菜，相比于之前跑去菜市场买菜省时。住的房子很宽敞，租金也不贵，我打算在南昌干一年，后面再去外省发展。所以这差不多半年都是和他们一起度过，也不会那么无趣。</li></ul>]]></content>
    
    
    <categories>
      
      <category>发生日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>砍瓜切菜</title>
    <link href="/2021/01/15/art12/"/>
    <url>/2021/01/15/art12/</url>
    
    <content type="html"><![CDATA[<ul><li>发了上个月工资后把房租、花呗以及其他一些费用支付后口袋就差不多空了，这个时候才懂得了月光族的由来。虽然以后薪资肯定更高，但是在那阶段肯定会有其他的一些开销，所以为了买车买房娶老婆存钱是必须的，要学会控制自己，该花的花，不该花的也别浪费，存起来，放到一张不绑定微信支付宝的卡里，每个月存点，慢慢积累。发的工资还完费用之后，剩下的买了电饭煲，电磁炉，平底锅，用来做饭炒菜。虽然耗电，但相比之下，我觉得电费和买菜的钱应该比点外卖便宜，外卖健不健康另说，太贵了。</li></ul><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><ul><li>网上什么教程都有，前两天网上找了一个土豆鸡肉咖喱饭的教程，先是到超市买齐材料，回家后开始制作。结果还是不错的，真的香，唯一不足的是咖喱放多了，导致有点糊，也可能是水放少了。吃一堑长一智，下次肯定就能够处理的更好。今天买了饭盒，可放微波炉加热的，这两天也是在安排菜单，每天吃什么菜，尽可能吃的健康营养，肯定不能天天吃菜叶子省钱，荤素合理搭配。</li><li>由于没买砧板，昨天切菜一手拿刀一手拿菜，不小心划了一下子，待会下班回家安排上，顺便买点菜。上次去那超市挺大的，啥玩意都有，写完这篇待会看下菜谱，一会把材料买齐了，度过这个美好的周六夜晚。</li><li>自从自己做饭，每顿都吃的饱饱的，感觉太幸福了！</li></ul>]]></content>
    
    
    <categories>
      
      <category>发生日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端样式相关工具网站分享</title>
    <link href="/2021/01/06/art11/"/>
    <url>/2021/01/06/art11/</url>
    
    <content type="html"><![CDATA[<h2 id="图片压缩工具-tinypng"><a href="#图片压缩工具-tinypng" class="headerlink" title="图片压缩工具 tinypng"></a>图片压缩工具 tinypng</h2><ul><li><a href="https://tinypng.com/">https://tinypng.com/</a><br><img src="/img/website-share1.png" alt="website-share1.png"></li></ul><h2 id="雪碧图生成器"><a href="#雪碧图生成器" class="headerlink" title="雪碧图生成器"></a>雪碧图生成器</h2><ul><li><a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></li><li>使用过这个工具生成雪碧图来做步进（逐帧）动画<br><img src="/img/website-share2.png" alt="website-share2.png"></li></ul><h2 id="在线颜色选择"><a href="#在线颜色选择" class="headerlink" title="在线颜色选择"></a>在线颜色选择</h2><ul><li><a href="https://flatuicolors.com/">https://flatuicolors.com/</a></li><li>在 B 站刷 animation 教程时老师使用的，挺好用<br><img src="/img/website-share3.png" alt="website-share3.png"></li></ul><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><ul><li><a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></li><li>也是在学 animation 的时候老师提过的，控制动画运行函数属性 animation-timing-function，在这个网站可以比较直观地看到具体效果<br><img src="/img/website-share4.png" alt="website-share4.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具网站</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来杭州了</title>
    <link href="/2020/12/30/art10/"/>
    <url>/2020/12/30/art10/</url>
    
    <content type="html"><![CDATA[<h3 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h3><ul><li>十二月的南昌已经很冷了，早早的就穿上了棉袄，十一月去了一次广州，追求爱情，失败了，那边还是挺暖和的，穿短袖，多走几步甚至就要出汗，那是第一次遇见四季如春的城市。十二月开始杭州这边公司沟通好后，了解这边的天气啥的，看看需要带什么衣服，发现和南昌的温度差不多，索性将平常穿的几件厚的衣服都带过来了，快递过来的，几包东西花了我一百多，觉得多余的是显示器，因为后面找好房子后发现房间比较小，显示器有点多余，而且公司也有显示器不需要自己带过去，带自己笔记本就行了。房子是学长的朋友推荐的，也住在那边，和房东沟通之后我在十二月四号就启程了。觉得不是很舒服的是来时的火车，为了便宜（其实我看错了，车票白天晚上一个价）我买了晚上的车票，那是我坐过的最难受的一次火车，不过我坐火车的次数也是屈指可数的，火车上非常乱，气味也非常难闻，不是想象中的小姐姐围绕着那种。</li></ul><h3 id="安定下来"><a href="#安定下来" class="headerlink" title="安定下来"></a>安定下来</h3><ul><li><p>下了火车我就直接乘坐地铁到距离房子不远的地铁站，坐了十几站，除了地铁一路导航找到了房子，和房东给的图片一样，一个卫生间，一个单间，一张桌子，一个厨子，房子里有点脏，到了之后我就开始打扫，之前房东说好不锁门，所以我就直接进了。擦了许久之后总算是打扫干净了，然后房东也收到我的微信，到房间里来和我商量租赁的事情，房东阿姨效率很高，流程也很熟练，我仔细看了租赁合同，没啥问题，暂时签了半年。签完阿姨就去小区办我的暂住证了。房租 750 一个月，水费一月 15，电费 1.3 一度，网费三十一月（想到这后悔当时买电脑的扩展坞的时候没买有网线接口的），傻乎乎的我忘了手机卡是校园流量套餐，全国流量只有二十 G，并且拉不拉几的我还没买路由器，导致这个月交了一百五的花费，用流量用的，直到现在我才买了路由器，次日买的网线（12.30）。</p></li><li><p>这边对于我来说的花主要是吃的开销大，公司不包饭，基本午饭或者加班时候的晚饭都是点外卖，点外卖大家也知道，那肯定比学校食堂的要贵得多啊，平均都在二十块一顿，虽然有三百的餐补，但花销还是存在的，尤其是刚来的第一个月，钱是问爸爸要的，两千块钱零零碎碎地花完了，花呗也用完了，但是出了社会就不好意思问父母要钱了。本来今天都吃不起饭的，但是昨天晚上发生了一件事。在公司待到九点多回去的时候下雪了，第一次觉得回家路上的夜晚被路灯和雪衬托地那么美，真的很好看，雪也下的很大，我掏出手机来拍，拍了段小视频我就赶紧把手机放起来，接着赶路了，感觉再驻足一会就要被雪覆盖了。然后我发了朋友圈，有一个初中玩的好的同学看到了就评论了，问我在哪，私聊后发现他也咋杭州，他在滨江，隔得不算太远，我们聊了挺久，后面我说了一句我吃不起饭了，想问他借点钱，我还没说借多少，他直接就转了五百过来，当时我真的很感动，这个朋友没交错。下个月发了工资会买个电饭煲做饭炒菜，这样开销会比之前少很多，我一室友已经实践过了，他在成都实习。从那之后应该就是以后正式工作的常态的，上下班，买菜做饭，一般公司都会有微波炉的，热一下就好了。</p></li><li><p>公司里我住的地方不远，走路二十多分钟，冬天也显得不那么冷。不过这边没什么朋友，周末都在宅在家里打游戏，追剧啥的（游戏是吃鸡，剧是动漫和韩剧）。在公司发现一个前端同事也喜欢吃鸡，也看韩剧，哈哈哈哈，感觉好巧啊。所以打算元旦的时候去杭州的动物园看一下，离得也不远。因为很喜欢动物，平常也看动物世界，还有就是很喜欢 BBC 出的《蓝色星球》，腾讯视频可以看。</p></li><li><p>另外这边天气感觉比南昌好多了，没有妖风，没有一会夏天一会冬天的情况，而且经常天晴，就很棒。这边我觉得很温暖的是斑马线，不是红绿灯旁边那种斑马线，基本上，很多车看到斑马线边上有人就会刹车让行人和电动车先过，而且离得十多米远。这种司机和行人之间的互相谦让我觉得很温暖，行人想让车辆先过去，司机想让行人先过马路，或许有的人会说车辆过斑马线本来就要让行人先走，但是我从小到大很少见过这样的行为，车辆都开的很快，少有司机会停着等行人先过。</p></li></ul><h3 id="总之就是非常美好"><a href="#总之就是非常美好" class="headerlink" title="总之就是非常美好"></a>总之就是非常美好</h3>]]></content>
    
    
    <categories>
      
      <category>发生日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电饭煲懒人红烧肉教程</title>
    <link href="/2020/09/13/art8/"/>
    <url>/2020/09/13/art8/</url>
    
    <content type="html"><![CDATA[<h2 id="周日的下厨时光"><a href="#周日的下厨时光" class="headerlink" title="周日的下厨时光"></a>周日的下厨时光</h2><ul><li>前两天室友买了电饭煲，周六晚上也计划好了第二天也就是周日做个红烧肉，懒人红烧肉，用电饭煲做。于是一早我俩就到附近菜市场买了一斤二两猪肉，猪肉28一斤，价格还是挺高的，我还以为这些天已经降下来了。然后去菜市场旁边的超市买所需的调料，因为做这个需要调料挺多的。买了八角，桂皮，干辣椒，盐，香叶，老抽，生姜，蒜，大葱，啤酒，东北大米。</li></ul><h3 id="电饭煲懒人红烧肉教程"><a href="#电饭煲懒人红烧肉教程" class="headerlink" title="电饭煲懒人红烧肉教程"></a>电饭煲懒人红烧肉教程</h3><ul><li>买好猪肉叫热心摊主切块，但是摊主好像会错意了，切成块的肉被扔进绞肉机绞了一下，成肉片。。。</li><li>猪肉冷水下锅焯水，撇去血沫，喜欢血沫的同学可以不撇，等到肉被煮成白色就可出锅了</li><li>将焯好水的肉放入电饭煲</li><li>加入八角，桂皮[，干辣椒]，香叶，老抽（适量），适量盐，生姜几片，蒜几颗，大葱切段，加入一罐啤酒，肉多的话可以多放</li><li>起锅烧油，哦不电饭煲通电开始煮，等个四五十分钟即可，在等待过程中可以搅拌一下，让调料与肉亲密接触，产生情愫。</li><li>时间到，出锅，上宽饭。</li><li>下面进入技术总结：<ul><li>老抽要适量，放的老抽太少，导致上色不深，颜色较浅</li><li>香叶几片就行不用太多</li><li>使用冰糖，因为我有白砂糖，所以在超市就没买冰糖，这也可能是上色失败的原因之一</li></ul></li><li>技术总结完毕</li></ul><h2 id="ending"><a href="#ending" class="headerlink" title="ending"></a>ending</h2><ul><li>放假做菜放松一下，让紧张的神经放松下来，心情愉悦，明天好上班。</li></ul>]]></content>
    
    
    <categories>
      
      <category>砍瓜切菜</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一份实习</title>
    <link href="/2020/09/07/art3/"/>
    <url>/2020/09/07/art3/</url>
    
    <content type="html"><![CDATA[<h1 id="day-1"><a href="#day-1" class="headerlink" title="day_1"></a>day_1</h1><ul><li>今天第一天实习，虽然是一个外包公司，但的确也能学到很多东西，比如自己没接触过的技术、工具软件或者说团队协作</li><li>进入公司先了解了公司的基本情况以及近阶段在进行的项目，开始上班后先是下载一些软件，然后注册账号加入团队进行协作，公司使用的是vue结合uniapp进行开发，了解了以下，好像挺吊的，今天使用到了git的可视化管理工具sourcetree；UI工具蓝湖，哪里不会点哪里；</li><li>最近的项目有区块链项目和个别政府项目，都不熟悉业务，所以安排了几个登录注册的页面给我写。从这就可出了自己的功底并不扎实，写页面出现一些问题：样式讲真以前不是很在意，就觉得学会vue，react就行，就能工作，但那也只停留在学习阶段。真正投入生产，工作就会发现力不从心，还是要重视基础。</li><li>记个笔记：UI做好的设计稿都是两倍像素的，所以写页面时要注意。</li><li>前一天晚上不知怎的，一点躺下躺了一个小时没睡着，或许是紧张或许是兴奋，于是深夜食堂，点了一份炸鸡，精精神神的五点多才睡，七点半起，七点五十出学校与另一个小伙伴汇合，晃晃悠悠的到了公司附近，骑的共享电动车，到了才发现没有停车点，我淦。于是忽悠工作人员忽悠半天终于好了，然后找到公司具体位置。午饭吃的浏阳蒸菜，晚餐吃的烤鸭饭，真香。</li><li>晚上八点多下班走了一段到公交站，等了十几分钟的单程214直达学校，公交车上坐下的时候就感觉身体被掏空，确实有点累，或许是没休息好，以后得早点睡。</li><li>加油！</li></ul><h1 id="day-2"><a href="#day-2" class="headerlink" title="day_2"></a>day_2</h1><ul><li><p>以后早上都是乘公交上班，因为这边没有助力车的停车点，第一次坐公交来上班，于是迷路了，第一天能找到路还是小伙伴带的。高德地图我居然看不懂，定位在万达里面，我转了半个小时，后来在万达里一个便利店买了瓶水问了一下收银，人家说在外面，果然转出来之后过了个红绿灯就到了。。。</p></li><li><p>span标签放img放图标，导致无法和其他行内元素对其，学长帮我看了以下，加了一行代码</p><pre><code class="hljs css"><span class="hljs-selector-tag">line-height</span><span class="hljs-selector-pseudo">:0px</span>;</code></pre><p>问题解决</p></li><li><p>抽离一个组件手机号和验证码，尽量考虑完整组件出现的各种状态，或者说出现没考虑到的需求直接修改组件便可，设置默认值，通过父组件绑定属性将值传给子组件，以前看了一点element源码，所以感觉写这个组件挺顺手的</p></li><li><p>写了一个tab切换功能，特别的样式写在active类名上，使用v-show控制出现在页面的tab内容</p></li><li><p>晚上七点半下班坐公交回学校，学校操场跑了三圈，确实胖了，减一减。</p></li><li><p>一般回学校后都会花一两个小时时间时间尽量完成在公司没完成的任务，然后推送。第二天一早拉取下来，有个老哥带我还挺好，逐渐和同事们熟悉起来，不会像刚去那么陌生。</p></li><li><p>今天把页面上的路由加上了，使用的是uniapp的路由api，学习了一下发现uniapp的api接近微信小程序，其实小程序也就是来自于vue语法，上并且结合了vue框架，将一些好用的功能、接口整合到一起，产生了更大的可能，似乎也理解了为什么写一套代码可以编写成十个平台。我暂时接触到的uni app 部分给我的感觉就是页面结构和数据来自vue，路由和一些好用的api比如路由跳转来自小程序，希望以后能将这个框架用得顺手。</p></li></ul><h1 id="day-3"><a href="#day-3" class="headerlink" title="day_3"></a>day_3</h1><ul><li><p>这几天都是在切图，可能接下来连续的几天还是切页面，但是我觉得也是能锻炼到自己的切图能力，在这过程中可能会接触一些平常不怎么用的样式或者说常见样式的高级用法等</p></li><li><p>上手写页面时多尝试，比如今天有个看上去像是图标的东西，UI没有切出来，于是考虑用基本html和css写出来，果然很快就写出来了，本人练的少，做出来感觉挺高兴的，我就不贴图丢人了</p></li><li><p>这三天就写了三个页面，登录注册以及重置密码，切图有点慢，这还没有加上逻辑，逻辑应该是前端加的吧，后端只是做简单的验证就行，等等，想起来上课的时候老师问的一个问题，逻辑写在前端还是后端验证起来更快，这我确实没想过，明天问问同事。</p></li><li><p>写页面的过程中也慢慢将vue的那部分记忆找回来了，vue指令，绑定类名，样式等</p></li></ul><h1 id="day-4"><a href="#day-4" class="headerlink" title="day_4"></a>day_4</h1><ul><li><p>第一天去上班把伞落在共享电动车上，无了，大学掉的第三把伞。</p></li><li><p>还没有在学校办理实习申请，因为第一周可以退改选，所以直接没去上课去上班了，平时也没什么时间，第二周再找老师申请一下。</p></li><li><p>学校的封闭管理好像不是很严，以前从寝室外围的洞里直接走出校，最近洞被封了，都是直接从校门出去，然后到公交站等车，一般都是提前十几二十分钟到公司。</p></li><li><p>工作中体验到合作的感觉，我写前端页面，UI 小哥问我有没有什么还需要再切的，和他沟通，感觉还挺好的，今天也问了带我的宇哥蛮多问题的，超过十分钟没有解决就立刻问，以免耽误进度，不过我今天进度还是有点慢，调结构和样式调了蛮久。所以打算之后自己写页面有些原则，写好结构调样式一直调不好，更换页面结构，换个角度思考解决方案。</p></li></ul><h2 id="记一些笔记"><a href="#记一些笔记" class="headerlink" title="记一些笔记"></a>记一些笔记</h2><ul><li>给元素设置图片背景<ol><li>将图片放在一个盒子中作为子元素，使用定位定好，但需要注意宽高的设置，否则容易出现拉伸图片或者超出盒子等问题，举个栗子<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-wrapper&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-bgi&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/pc-images/banner.png&quot;</span> <span class="hljs-attr">alt</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-content&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></code></pre><pre><code class="hljs css"><span class="hljs-selector-class">.top-wrapper</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">7.73rem</span>;  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">align-items</span>: flex-end;  <span class="hljs-attribute">justify-content</span>: center;&#125;<span class="hljs-selector-class">.top-bgi</span> &#123;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">position</span>: absolute;  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;&#125;<span class="hljs-selector-class">.top-bgi</span> <span class="hljs-selector-tag">img</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;&#125;</code></pre></li></ol><ul><li>主要是和宽高和定位有关的样式，其他的一些样式是用作别的功能的。</li><li>定位用作父子元素，父元素设置 position:relative;子元素设置 position:absolute;然后通过 top,left,right,bottom 来控制子元素的位置</li></ul><ol start="2"><li>给这个元素设置 background 属性，并且设置几个相关的属性进行调整便可</li></ol></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-wrapper&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></code></pre><pre><code class="hljs css"><span class="hljs-selector-class">.img-wrapper</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">4.53rem</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">2.09rem</span>;  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(/static/pc-images/judge.png);  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;&#125;</code></pre><ul><li>写页面时尽量使用弹性布局，以及使用 rem 单位等从多个方面考虑兼容性，暂时我写的是 pc 端，可能这块考虑的不是很多，后面有机会接触移动端再总结。</li></ul><h1 id="day-5"><a href="#day-5" class="headerlink" title="day_5"></a>day_5</h1><h2 id="emmm还是有点慢"><a href="#emmm还是有点慢" class="headerlink" title="emmm还是有点慢"></a>emmm还是有点慢</h2><ul><li><p>今天开会，老大和大家讨论了各个项目的进度，我参与的这个项目进度很慢，感觉有压力，有种不好的预感，下周开始应该是要加班了，这一周工作下来，觉得公司的工作时间不是很严，早上九点上班，迟到一点没事的，带我那个老哥天天十点上班，结果进度有点慢，有点尴尬</p></li><li><p>明天开始接触数据了，我开始写登陆注册等这几个我写好的页面的逻辑，然后调接口，觉得还挺开心的，这一周切页面我快哭了，调来调去真心累。接触数据我感觉在这过程中肯定能学到更多东西，至少比我写页面学到的东西多，也是尽量自己解决，多和宇哥沟通</p></li></ul><h2 id="边写边复习"><a href="#边写边复习" class="headerlink" title="边写边复习"></a>边写边复习</h2><h4 id="拾起v-for循环，今天是使用v-for循环组件"><a href="#拾起v-for循环，今天是使用v-for循环组件" class="headerlink" title="拾起v-for循环，今天是使用v-for循环组件"></a>拾起v-for循环，今天是使用v-for循环组件</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">index-treaty-item</span> <span class="hljs-attr">:rate</span>=<span class="hljs-string">&quot;item.rate&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.title&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">index-treaty-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></code></pre><pre><code class="hljs js">list: [        &#123;          title: <span class="hljs-string">&#x27;顺风顺丰到付&#x27;</span>,          rate: <span class="hljs-number">20</span>        &#125;,        &#123;          title: <span class="hljs-string">&#x27;事故损失&#x27;</span>,          rate: <span class="hljs-number">60</span>        &#125;,        &#123;          title: <span class="hljs-string">&#x27;说如果文旅&#x27;</span>,          rate: <span class="hljs-number">12</span>        &#125;,        &#123;          title: <span class="hljs-string">&#x27;s公司公司发&#x27;</span>,          rate: <span class="hljs-number">95</span>        &#125;,        &#123;          title: <span class="hljs-string">&#x27;是撒噶认为&#x27;</span>,          rate: <span class="hljs-number">32</span>        &#125;      ]</code></pre><p><img src="/img/example3.png"></p><ul><li>这里写的可能不是很正规，一般标签内没有内容的话用单标签，like this，<index-treaty-item />,emmm，看起来好像有点别扭，vue会将驼峰命名的组件名配置为这种短杠连接，react里组件一般是大驼峰命名法，在标签中也是大驼峰。</li></ul><h4 id="css的background属性"><a href="#css的background属性" class="headerlink" title="css的background属性"></a>css的background属性</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title-left title1&quot;</span>&gt;</span>官方合约<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><pre><code class="hljs css">  <span class="hljs-selector-class">.title-left</span> &#123;    <span class="hljs-attribute">display</span>: block;    <span class="hljs-attribute">height</span>: <span class="hljs-number">0.4rem</span>;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.29rem</span>;    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0.4rem</span>;  &#125;<span class="hljs-selector-class">.title1</span> &#123;    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to top, #<span class="hljs-number">4678</span>FF <span class="hljs-number">0%</span>, #<span class="hljs-number">4678</span>FF <span class="hljs-number">50%</span>, transparent <span class="hljs-number">51%</span>, transparent <span class="hljs-number">100%</span>)  &#125;</code></pre><p><img src="/img/example4.png"></p><ul><li>单是这个linear-gradient属性就有很多的作用，真的css太多了，要全部记下来可能要花费一些时间，大家一般都是学的差不多，然后在工作中需要用到时再去查，所以说还是要有有点印象，不说学的时候立马记下来，但是要知道这个东西是干嘛的，<strong>其实不仅仅是css，还有比如npm包，包特别特别多，有机会的话还是多记下几个作用，多收藏，指不定啥时候就会用到。见多识广感觉蛮难的，对知识的扩展，我了解的技术太少了，就知道那主流前端框架，其他方面只了解一点点，随着学习工作，知道的东西会越来越多的，但自己主动去了解还是更好的，节省以后的时间。</strong></li></ul><h1 id="day-N"><a href="#day-N" class="headerlink" title="day_N"></a>day_N</h1><h2 id="今天周日，记录昨天的工作"><a href="#今天周日，记录昨天的工作" class="headerlink" title="今天周日，记录昨天的工作"></a>今天周日，记录昨天的工作</h2><ul><li>虽然说开始写逻辑调接口，但是数据这一块还是感觉陌生，问了宇哥很多问题，因为这个项目是基于移动端项目的二次开发，只不过页面写的是pc端，数据还是一样的，换个接口地址就行。所以的话我需要花时间去了解这个项目数据的走向，看了半天也不是很懂，晚上快下班宇哥和我讲解了一下，似乎有头绪了。</li></ul><h3 id="关于宇哥"><a href="#关于宇哥" class="headerlink" title="关于宇哥"></a>关于宇哥</h3><ul><li><p>昨晚一起下的班，路上和他聊了会，宇哥96年的，比我大三岁，但是他工作七年了，没有读大学甚至没有读高中，那当时我就特别佩服他，从平时他教我的过程中我也能感受到他很有经验，很多我问的问题，解决不了的需求，他一般看一眼就知道错哪了，或者说很快就能给我建议。他说他早几年的时候也是在外面工作，但是工作久了之后就回南昌了，可能压力没那么大把，他是全栈的，说小公司不会全栈可能人家就不需要，因为人员比较少。反正就很佩服宇哥，向他学习。</p></li><li><p>昨天完成了登录注册的接口调试，然后开始搞首页的显示用户头像和用户名，需要从vuex里面取出来，这块的过程我还没太懂，所以就去改首页的动态部分了，把死数据改成坑，把假数据埋进去，放在数据源里让它渲染出来。首页比较多的地方用到tab切换，所以在下面总结了一下。</p></li></ul><h2 id="vue-tab切换功能"><a href="#vue-tab切换功能" class="headerlink" title="vue tab切换功能"></a>vue tab切换功能</h2><ul><li><p>这个功能用vue的双向数据绑定实现起来就很简单，结合指令能达到比较好的效果</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- tab --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;treaty-header&quot;</span>&gt;</span>  &lt;button    class=&quot;treaty-btn btn-sse&quot;    :class=&quot;treatyActive === &#x27;sse&#x27;?&#x27;treaty-active&#x27;:&#x27;&#x27;&quot;    @click=&quot;treatyActive = &#x27;sse&#x27;&quot;  &gt;SSE<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  &lt;button    class=&quot;treaty-btn btn-eth&quot;    :class=&quot;treatyActive === &#x27;eth&#x27;?&#x27;treaty-active&#x27;:&#x27;&#x27;&quot;    @click=&quot;treatyActive = &#x27;eth&#x27;&quot;  &gt;ETH<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-comment">&lt;!-- tab对应的内容 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;treaty-content&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;treaty-left content&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in (treatyActive===&#x27;sse&#x27;?list:list3)&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;&#123;index&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">index-treaty-item</span> <span class="hljs-attr">:rate</span>=<span class="hljs-string">&quot;item.rate&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.title&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">index-treaty-item</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;treaty-middle content&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in (treatyActive===&#x27;sse&#x27;?list1:list4)&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;&#123;index&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">index-treaty-item</span> <span class="hljs-attr">:rate</span>=<span class="hljs-string">&quot;item.rate&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.title&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">index-treaty-item</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;treaty-right content&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in (treatyActive===&#x27;sse&#x27;?list2:list5)&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;&#123;index&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">index-treaty-item</span> <span class="hljs-attr">:rate</span>=<span class="hljs-string">&quot;item.rate&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.title&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">index-treaty-item</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-keyword">return</span> &#123;    treatyActive:<span class="hljs-string">&#x27;sse&#x27;</span>  &#125;&#125;</code></pre><pre><code class="hljs css"><span class="hljs-selector-class">.treaty-active</span> &#123;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span> <span class="hljs-meta">!important</span>;  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, #<span class="hljs-number">8990</span>ed <span class="hljs-number">0%</span>, #<span class="hljs-number">757</span>cff <span class="hljs-number">100%</span>) <span class="hljs-meta">!important</span>;&#125;</code></pre></li><li><p>首先就是类名绑定，这里使用的是三元运算符，当<strong>treatyActive</strong>的值等于该按钮设定的值时就给这个元素加上类名，当值改变时就删除了这个类名，这个类名的特别样式需要先写好，让人知道现在处于这个tab。然后在这个tab被点击时，修改<strong>treatyActive</strong>的值，tab会立即改变，同时tab内容部分也会进行条件判断来展示不同的内容<br><img src="/img/example5.png"></p></li></ul><p><img src="/img/example6.png"></p>]]></content>
    
    
    <categories>
      
      <category>上班日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用github pages在线运行自己写的react/vue项目</title>
    <link href="/2020/09/05/art2/"/>
    <url>/2020/09/05/art2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>因为自己需要用到这项功能，所以花了点时间搞懂了，并记录下来</li></ul><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ul><li><p>自己的项目已经正常add,commit,push到GitHub仓库</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2></li><li><p>这里将以 react项目为例，vue项目也是一样的步骤，只是 react 打包完成的文件夹叫build，而 vue 项目打包完成的文件夹叫 dist，所以 vue 项目的过程只需要将下列命令 add 和 push 中的 build 改为 dist 就行</p><h4 id="本地项目打开命令行，依次执行以下命令"><a href="#本地项目打开命令行，依次执行以下命令" class="headerlink" title="本地项目打开命令行，依次执行以下命令"></a>本地项目打开命令行，依次执行以下命令</h4><pre><code class="hljs js">git checkout -b gh-pages  <span class="hljs-comment">//创建并切换到gh-pages分支</span>npm run build <span class="hljs-comment">//将此项目打包，会生成一个build文件夹</span>git add -f build  <span class="hljs-comment">//将build文件夹提交，-f参数是因为build目录放在.gitignore文件中，需要强制提交</span>git commit -m <span class="hljs-string">&#x27;备注&#x27;</span>git subtree push --prefix build origin gh-pages <span class="hljs-comment">//部署build目录下的代码</span></code></pre><h4 id="检查是否部署成功"><a href="#检查是否部署成功" class="headerlink" title="检查是否部署成功"></a>检查是否部署成功</h4></li><li><p>打开GitHub进入该项目，找到setting按钮，一直往下滑会看到这个<br><img src="/img/example.png"><br>因为我自己绑定了域名，所以是这样，没有绑定域名的话，出现的就是<strong>https://你的用户名.github.io/项目名</strong>，然后就可以点击这个链接查看了<br><img src="/img/example2.png"></p></li></ul><h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><ul><li>本地push分支的时候报错，non-fast-forward，我对这个分支的操作不是特别熟悉，害怕把代码弄乱，于是没有按照百度结果那样fetch，merge，或者说pull，我把这个分支删掉从头来过了一遍之后就好了，熟悉git操作的朋友可自行解决或者可以按照百度方法解决。 </li><li>部署上去之后点击链接跳转到的页面是github提供的404页面，这可能是因为没有完成更新，查看链接左侧时看不到一个绿色的钩，绿钩出现后至少可以访问了。 </li><li>部署上去之后点击链接跳转到的页面是空白的，并且查看页面结构只有一个noscript标签，在控制台能看到很多404报错，这是因为css和js文件没有加载出来，我不确定是怎么解决的，一可能是因为GitHub更新的有点慢，过几分钟再看看就能看到页面出现了。二可能是打包文件的引入css,js文件的路径有问题（查了一下看到的），于是我手动把路径改成了相对路径，过了一会后访问发现页面出现了 </li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>此文主要描述了实现的基本过程，可能有些地方有错误，欢迎指出一起交流</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github pages</tag>
      
      <tag>webapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0到1使用 Hexo 框架搭建个人博客并部署到 GitHub Pages</title>
    <link href="/2020/09/04/art1/"/>
    <url>/2020/09/04/art1/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>也是最近一周才知道有<a href="https://docs.github.com/cn/github/working-with-github-pages/about-github-pages">Github Pages</a>这个东西，它是一个免费的服务器，可以使用 GitHub Pages 直接从 GitHub 仓库托管关于自己、您的组织或您的项目的站点。因为最近好多小伙伴都购买了域名和服务器来托管自己写的项目，于是我也屁颠屁颠地买了一个域名，并在这两天投入个人博客的搭建。在百度教程的时候看到比较多推荐的一个搭建博客的框架<a href="https://hexo.io/zh-cn/docs/">hexo</a>，然后就使用这个框架将博客搭建起来了，目前只是将博客一些基础的结构和功能弄好了，感兴趣的可以看看<a href="http://shiningpeng.top/">我的博客</a>，话不多说进入正题。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="前置步骤：安装好-git-和-node-js"><a href="#前置步骤：安装好-git-和-node-js" class="headerlink" title="前置步骤：安装好 git 和 node.js"></a>前置步骤：安装好 git 和 node.js</h3><h3 id="GitHub-Pages-部分"><a href="#GitHub-Pages-部分" class="headerlink" title="GitHub Pages 部分"></a>GitHub Pages 部分</h3><ul><li>在GitHub新建仓库，并且仓库名必须为 你的用户名.github.io  ，这里的用户名不区分大小写，都会转化为小写字母，比如我的用户名 ShiningPeng， 我建的仓库名字 shiningpeng.github.io </li><li>至少上传一次文件激活github pages，可以在初始化仓库时添加一个readme文件，或者可以按照创建完仓库后的命令行提示，直接把那一串命令放在一个新的文件夹 git bash 命令行中执行</li><li>自定义域名，如果你购买了域名，可以在 用户名.github.io 这个仓库的 setting 中一直往下滑找到 custom domain，把域名填进去，并点击 save 保存</li></ul><h3 id="本地-hexo-部分"><a href="#本地-hexo-部分" class="headerlink" title="本地 hexo 部分"></a>本地 hexo 部分</h3><ul><li>本地找个心仪的目录建个文件夹，鼠标右键git bash</li><li>使用npm安装脚手架 hexo-cli，当然也可以使用cnpm（需要下载淘宝镜像）<pre><code class="hljs bash">npm install -g hexo-cli</code></pre></li><li>安装hexo<pre><code class="hljs bash">npm install hexo</code></pre></li><li>初始化hexo，并安装依赖<pre><code class="hljs bash">hexo init 文件夹名称<span class="hljs-built_in">cd</span> 文件夹名称npm install</code></pre></li><li>生成的文件具体是做什么的可以去看<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a></li><li>hexo generate，运行时可缩写为hexo g，用来生成静态文件</li><li>hexo server，可缩写为 hexo s，在本地启动服务器预览，默认为 <a href="http://localhost:4000/">http://localhost:4000/</a></li><li>hexo deploy，部署网站到GitHub</li></ul><p><strong>到这，一个完整的部署过程就完成了</strong></p><hr><ul><li>hexo clean ，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</li><li>在source目录下新建文件 CNAME ，此文件没有后缀名，用来存放域名，可以防止每次重新部署网站后GitHub pages的custom domain变为空，在文件中写入你的域名，可以不写www，没有域名可以不用建这个文件</li><li>安装 hexo-deployer-git，一键部署插件，将网站更新推送到GitHub<pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></li><li>安装好后修改配置文件 _config.yml，一般是在文件最底部，修改为这样<pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span> <span class="hljs-comment">#例如我的为 https://github.com/ShiningPeng/shiningpeng.github.io</span>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]    <span class="hljs-comment"># 分支</span>  <span class="hljs-attr">message:</span> [<span class="hljs-string">message</span>]  <span class="hljs-comment"># 平常commit时的提交备注</span></code></pre></li><li>修改完文件hexo s预览无误之后，hexo clean,hexo g,hexo d 一把梭，建议还是在部署之前执行一遍clean</li></ul><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul><li>主题可以从<a href="https://hexo.io/themes/">hexo主题</a>中挑选一个喜欢的，然后点击蓝色文字进入主题，点击图片是进入这个主题的示例网站，不过有的网站可能更换域名或者域名过期了访问不了。点击蓝色文字后跳转到主题的GitHub源码地址，可以从readme查看该主题的应用步骤，或者点击提供的用户文档了解应用过程</li><li>一般主题的应用步骤<ol><li>在本地博客的那个文件夹下有一个themes目录存放主题，默认是landscape，在themes目录下打开命令行，将该主题源码克隆到本地，例如<pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git fluid</code></pre>命令中项目地址后面是给这个主题取个别名，方便后面使用，不改默认为仓库名，生成一个以此为名的文件夹</li><li>在根目录找到_config.yml文件，滑到最下方，找到 theme 字段，将landscape改为你刚取的别名，如果没取别名就改为仓库名</li><li>hexo clean, hexo g, hexo s 预览效果，一般主题会为你做好很多事情，<strong>基本上不需要自己写什么文件，只需要改改配置就能完成比较好的功能</strong>，比如网站的布局啊，样式啊，路由等等，确认无误之后就可以hexo d 了。</li><li>需要改配置的话可以根据这个主题提供的文档来做适当的更改</li></ol></li></ul><h3 id="日常更新"><a href="#日常更新" class="headerlink" title="日常更新"></a>日常更新</h3><p><strong>这里我讲下写一篇文章的步骤</strong></p><ul><li>项目根目录下运行<pre><code class="hljs bash">hexo new post 文件名</code></pre>这里的文件名建议写英文，到时候访问文章可以看到浏览器的地址栏显示的正是这个文件名，如果是中文的文件名，url就会比较长，不太美观。</li><li>在 根目录 -&gt; source -&gt; _post 目录下找到新生成的文件进行编辑<pre><code class="hljs md">---title: 从0到1使用 Hexo 框架搭建个人博客并部署到 GitHub Pagesdate: 2020-09-04 05:40:26tags: [Hexo, Fluid]categories: &quot;教程&quot;index<span class="hljs-emphasis">_img: /img/hexo.png</span><span class="hljs-emphasis">banner_</span>img: /img/hexo.png---</code></pre>需要图片的话可以将图片放在本地，或者引入在线图片，然后给文章添加标签和分类等属性，具体有哪些属性可以查看文档慢慢熟悉，编辑完头部之后，在这下方就可以开始编辑文字内容了</li><li>写完文章之后执行<pre><code class="hljs bash">hexo g -d</code></pre>这条命令的意思是：生成新的静态文件后直接部署到GitHub</li><li>需要注意的是部署之后访问github.io 或者自己的域名可能发现刷新之后并没有看到自己刚写的文章，这时我们等一会就好了，过几分钟就刷新出来了</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>可能文章写的不是特别详细，文章有错误的地方可以指出，执行过程中遇到问题也可以留言交流</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
